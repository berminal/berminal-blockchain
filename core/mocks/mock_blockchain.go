// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/iost-official/prototype/core/block (interfaces: Chain)

// Package core_mock is a generated GoMock package.
package core_mock

import (
	gomock "github.com/golang/mock/gomock"
	block "github.com/iost-official/prototype/core/block"
	tx "github.com/iost-official/prototype/core/tx"
	reflect "reflect"
)

// MockChain is a mock of Chain interface
type MockChain struct {
	ctrl     *gomock.Controller
	recorder *MockChainMockRecorder
}

// MockChainMockRecorder is the mock recorder for MockChain
type MockChainMockRecorder struct {
	mock *MockChain
}

// NewMockChain creates a new mock instance
func NewMockChain(ctrl *gomock.Controller) *MockChain {
	mock := &MockChain{ctrl: ctrl}
	mock.recorder = &MockChainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChain) EXPECT() *MockChainMockRecorder {
	return m.recorder
}

// GetBlockByHash mocks base method
func (m *MockChain) GetBlockByHash(arg0 []byte) *block.Block {
	ret := m.ctrl.Call(m, "GetBlockByHash", arg0)
	ret0, _ := ret[0].(*block.Block)
	return ret0
}

// GetBlockByHash indicates an expected call of GetBlockByHash
func (mr *MockChainMockRecorder) GetBlockByHash(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockChain)(nil).GetBlockByHash), arg0)
}

// GetBlockByNumber mocks base method
func (m *MockChain) GetBlockByNumber(arg0 uint64) *block.Block {
	ret := m.ctrl.Call(m, "GetBlockByNumber", arg0)
	ret0, _ := ret[0].(*block.Block)
	return ret0
}

// GetBlockByNumber indicates an expected call of GetBlockByNumber
func (mr *MockChainMockRecorder) GetBlockByNumber(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByNumber", reflect.TypeOf((*MockChain)(nil).GetBlockByNumber), arg0)
}

// GetBlockByteByHash mocks base method
func (m *MockChain) GetBlockByteByHash(arg0 []byte) ([]byte, error) {
	ret := m.ctrl.Call(m, "GetBlockByteByHash", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByteByHash indicates an expected call of GetBlockByteByHash
func (mr *MockChainMockRecorder) GetBlockByteByHash(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByteByHash", reflect.TypeOf((*MockChain)(nil).GetBlockByteByHash), arg0)
}

// GetHashByNumber mocks base method
func (m *MockChain) GetHashByNumber(arg0 uint64) []byte {
	ret := m.ctrl.Call(m, "GetHashByNumber", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetHashByNumber indicates an expected call of GetHashByNumber
func (mr *MockChainMockRecorder) GetHashByNumber(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHashByNumber", reflect.TypeOf((*MockChain)(nil).GetHashByNumber), arg0)
}

// GetTx mocks base method
func (m *MockChain) GetTx(arg0 []byte) (*tx.Tx, error) {
	ret := m.ctrl.Call(m, "GetTx", arg0)
	ret0, _ := ret[0].(*tx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTx indicates an expected call of GetTx
func (mr *MockChainMockRecorder) GetTx(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTx", reflect.TypeOf((*MockChain)(nil).GetTx), arg0)
}

// HasTx mocks base method
func (m *MockChain) HasTx(arg0 *tx.Tx) (bool, error) {
	ret := m.ctrl.Call(m, "HasTx", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasTx indicates an expected call of HasTx
func (mr *MockChainMockRecorder) HasTx(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasTx", reflect.TypeOf((*MockChain)(nil).HasTx), arg0)
}

// Iterator mocks base method
func (m *MockChain) Iterator() block.ChainIterator {
	ret := m.ctrl.Call(m, "Iterator")
	ret0, _ := ret[0].(block.ChainIterator)
	return ret0
}

// Iterator indicates an expected call of Iterator
func (mr *MockChainMockRecorder) Iterator() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Iterator", reflect.TypeOf((*MockChain)(nil).Iterator))
}

// Length mocks base method
func (m *MockChain) Length() uint64 {
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Length indicates an expected call of Length
func (mr *MockChainMockRecorder) Length() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockChain)(nil).Length))
}

// Push mocks base method
func (m *MockChain) Push(arg0 *block.Block) error {
	ret := m.ctrl.Call(m, "Push", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push
func (mr *MockChainMockRecorder) Push(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockChain)(nil).Push), arg0)
}

// Top mocks base method
func (m *MockChain) Top() *block.Block {
	ret := m.ctrl.Call(m, "Top")
	ret0, _ := ret[0].(*block.Block)
	return ret0
}

// Top indicates an expected call of Top
func (mr *MockChainMockRecorder) Top() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Top", reflect.TypeOf((*MockChain)(nil).Top))
}
