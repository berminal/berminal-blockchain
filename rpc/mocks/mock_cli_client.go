// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/iost-official/prototype/rpc (interfaces: CliClient)

// Package mock_rpc is a generated GoMock package.
package mock_rpc

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	rpc "github.com/iost-official/prototype/rpc"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockCliClient is a mock of CliClient interface
type MockCliClient struct {
	ctrl     *gomock.Controller
	recorder *MockCliClientMockRecorder
}

// MockCliClientMockRecorder is the mock recorder for MockCliClient
type MockCliClientMockRecorder struct {
	mock *MockCliClient
}

// NewMockCliClient creates a new mock instance
func NewMockCliClient(ctrl *gomock.Controller) *MockCliClient {
	mock := &MockCliClient{ctrl: ctrl}
	mock.recorder = &MockCliClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCliClient) EXPECT() *MockCliClientMockRecorder {
	return m.recorder
}

// GetBalance mocks base method
func (m *MockCliClient) GetBalance(arg0 context.Context, arg1 *rpc.Key, arg2 ...grpc.CallOption) (*rpc.Value, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBalance", varargs...)
	ret0, _ := ret[0].(*rpc.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance
func (mr *MockCliClientMockRecorder) GetBalance(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockCliClient)(nil).GetBalance), varargs...)
}

// GetBlock mocks base method
func (m *MockCliClient) GetBlock(arg0 context.Context, arg1 *rpc.BlockKey, arg2 ...grpc.CallOption) (*rpc.BlockInfo, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlock", varargs...)
	ret0, _ := ret[0].(*rpc.BlockInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock
func (mr *MockCliClientMockRecorder) GetBlock(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockCliClient)(nil).GetBlock), varargs...)
}

// GetContract mocks base method
func (m *MockCliClient) GetContract(arg0 context.Context, arg1 *rpc.ContractKey, arg2 ...grpc.CallOption) (*rpc.Contract, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContract", varargs...)
	ret0, _ := ret[0].(*rpc.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContract indicates an expected call of GetContract
func (mr *MockCliClientMockRecorder) GetContract(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContract", reflect.TypeOf((*MockCliClient)(nil).GetContract), varargs...)
}

// GetState mocks base method
func (m *MockCliClient) GetState(arg0 context.Context, arg1 *rpc.Key, arg2 ...grpc.CallOption) (*rpc.Value, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetState", varargs...)
	ret0, _ := ret[0].(*rpc.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetState indicates an expected call of GetState
func (mr *MockCliClientMockRecorder) GetState(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockCliClient)(nil).GetState), varargs...)
}

// PublishTx mocks base method
func (m *MockCliClient) PublishTx(arg0 context.Context, arg1 *rpc.Transaction, arg2 ...grpc.CallOption) (*rpc.Response, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishTx", varargs...)
	ret0, _ := ret[0].(*rpc.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishTx indicates an expected call of PublishTx
func (mr *MockCliClientMockRecorder) PublishTx(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTx", reflect.TypeOf((*MockCliClient)(nil).PublishTx), varargs...)
}
